# -*- coding: utf-8 -*-
"""House_Price_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KPdKC_OA9N8rVMiAe9OGtv9keSl0DXri
"""

#import the dependencies
 import numpy as np
 import pandas as pd
 import matplotlib.pyplot as plt
 import seaborn as sns
 import sklearn.datasets
 from sklearn.model_selection import train_test_split
 from xgboost import XGBRegressor
 from sklearn import metrics

"""Importing the boston House Price Dataset"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

#Loading the dataset to a Pandas DataFrame
house_price_dataframe=pd.DataFrame(house_price_dataset.data,columns=house_price_dataset.feature_names)

house_price_dataframe

#add the target(price) column to the dataframe
house_price_dataframe['price']=house_price_dataset.target

house_price_dataframe['price']

house_price_dataframe.head()

# check for missing values
house_price_dataframe.isnull().sum()

#statistical measures of the dataset
house_price_dataframe.describe()

"""Understanding the correlations between various features in the dataset
Types of correlation:
1. Postive Correlation.
2. Negative Correlation.

"""

correlation=house_price_dataframe.corr()

correlation

#constructing a heat map to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""Splitting the data and the target(price)"""

x=house_price_dataframe.drop(['price'],axis=1)
 y=house_price_dataframe['price']

x

y

"""Splitting the data into training and testing data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)

"""Model Training
--> XGBoost Regressor
"""

#loading the model
model=XGBRegressor()

#Training the model with x_train
model.fit(x_train,y_train)

"""Evaluating the model

"""

#accuracy for prediction of training data
training_data_prediction=model.predict(x_train)
print(training_data_prediction)

#R Squared Error
score_1=metrics.r2_score(y_train,training_data_prediction)
print('R Squared Error: ',score_1)

#Mean Absolute Error
score_2=metrics.mean_absolute_error(y_train,training_data_prediction)
print('MAE: ',score_2)

"""Visualizing the actual prices and predicted prices"""

plt.scatter(y_train,training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title("Actual Price vs Predicted Price")
plt.show()

#accuracy for prediction of test data
test_data_prediction=model.predict(x_test)
print(test_data_prediction)

#R Squared Error
score_3=metrics.r2_score(y_test,test_data_prediction)
print('R Squared Error: ',score_3)

#Mean Absolute Error
score_4=metrics.mean_absolute_error(y_test,test_data_prediction)
print('MAE: ',score_4)

plt.scatter(y_test,test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title("Actual Price vs Predicted Price")
plt.show()

